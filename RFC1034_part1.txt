1. STATUS OF THIS MEMO

This RFC is an introduction to the Domain Name System (DNS), and omits
many details which can be found in a companion RFC, "Domain Names -
Implementation(実装) and Specification" [RFC-1035].  That RFC assumes that the
reader is familiar with the concepts discussed in this memo.
DNSのイントロダクション
細かいことはRFC1035
RFC1035はRFC1034を前提としている

A subset of DNS functions and data types constitute(構成する) an official
protocol.  The official protocol includes standard queries and their
responses and most of the Internet class data formats (e.g., host
addresses).
DNS機能とデータ・タイプが公式なプロトコル
標準クエリとそのレスポンス、インターネットクラスデータ・フォーマットの殆どがこのプロトコルに含まれる

However, the domain system is intentionally(意図的に) extensible.  Researchers are
continuously proposing(提案), implementing(実装) and experimenting with new data
types, query types, classes, functions, etc.  Thus(このように) while the components
of the official protocol are expected to stay essentially(本質的に) unchanged and
operate as a production service, experimental behavior should always be
expected in extensions beyond the official protocol.  Experimental or
obsolete features are clearly marked in these RFCs, and such information
should be used with caution.
ドメインシステムは意図的に拡張可
プロトコルは本質的に変わらないことを望まれているが、研究者たちが新しい拡張を研究しているので、
実験的、廃止された機能はここのRFCで記載するので、気をつけて

The reader is especially cautioned not to depend on the values which
appear in examples to be current or complete(正しい), since their purpose is
primarily(主に) pedagogical.(教育学的な)  Distribution of this memo is unlimited.
例示の値はあくまで例。本気にするな

2. INTRODUCTION

This RFC introduces domain style names, their use for Internet mail and
host address support, and the protocols and servers used to implement(実装)
domain name facilities.
[domain style names]? 
[host address] http://www.itbook.info/study/p54.html
[address class] http://www.itbook.info/study/p55.html

2.1. The history of domain names

The impetus(勢い) for the development of the domain system was growth in the
Internet:

   - Host name to address mappings were maintained by the Network
     Information Center (NIC) in a single file (HOSTS.TXT) which
     was FTPed by all hosts [RFC-952, RFC-953].  The total network
     bandwidth consumed in distributing a new version by this
     scheme is proportional to(比例して) the square(の二乗) of the number of hosts in
     the network, and even when multiple levels of FTP are used,
     the outgoing FTP load on the NIC host is considerable(無視できない).
     Explosive growth in the number of hosts didn't bode well(良い兆候でない) for
     the future.
 	FTPでhosts.txtを交換していた時代のインターネット
	つらたん -> DNSしようぜ

   - The network population(人口) was also changing in character.(性格)  The
     timeshared hosts that made up the original ARPANET were being
     replaced with local networks of workstations.  Local
     organizations were administering their own names and
     addresses, but had to wait for the NIC to change HOSTS.TXT to
     make changes visible to the Internet at large.  Organizations
     also wanted some local structure on the name space.
	タイムシェアリングなホストからローカルなワークステーションへ
	新しく立てたホストは、hostsの更新を待たなきゃインターネットから見えなかった
	ローカルでのネームスペース機構がほしい
	 
   - The applications on the Internet were getting more
     sophisticated(洗練された) and creating a need for general purpose name
     service.


The result was several ideas about name spaces and their management
[IEN-116, RFC-799, RFC-819, RFC-830].  The proposals(提案) varied(多様), but a
common thread was the idea of a hierarchical(階層制の) name space, with the
hierarchy(階層的で) roughly(概略的で) corresponding to(に対応する) organizational structure, and names
using "."  as the character(文字) to mark the boundary(境界) between hierarchy
levels.(階層レベル)  A design using a distributed database(分散データベース) and generalized resources
was described in [RFC-882, RFC-883].  Based on experience with several
implementations(実行), the system evolved into(に発展する) the scheme described in this
memo.

The terms(言葉、用語) "domain" or "domain name" are used in many contexts beyond the
DNS described here.  Very often, the term domain name is used to refer
to a name with structure indicated by dots, but no relation to the DNS.
This is particularly true in mail addressing [Quarterman 86].
ドメイン / ドメイン名
ドメイン名は、DNSに関係なくドットで区切られた名前構造を呼ぶときに使われます。

2.2. DNS design goals

The design goals of the DNS influence(に影響を及ぼす) its structure.  They are:

   - The primary goal is a consistent(首尾一貫した) name space which will be used
     for referring to resources.  In order to avoid the problems
     caused by ad hoc(特定の目的のための) encodings, names should not be required to
     contain network identifiers, addresses, routes, or similar
     information as part of the name.
	 一環とした名前空間のルールの策定がゴール
	 余計な問題を起こさないため名前にはアドホックなエンコーディングは避けるべき

   - The sheer(薄い) size of the database and frequency of updates
     suggest that it must be(べき) maintained in a distributed manner(方法),
     with local caching to improve performance.  Approaches [that
     attempt to collect a consistent copy of the entire database]
     will become more and more expensive(コストが掛かる) and difficult, and hence(今後)
     should be avoided(避けるべき).  The same principle(原理) holds for the structure
     of the name space, and in particular(特有の) mechanisms(メカニズム) for creating
     and deleting names; these should also be distributed.
	 少ないデータ・頻繁なアップデートは分散管理すべき件。ローカルキャッシュがパフォーマンスを上げる
	 名前を作成・削除する特有のメカニズムを持つ名前空間の構造も同様に分散管理すべき
	 
   - Where there tradeoffs between the cost of acquiring data, the
     speed of updates, and the accuracy(正確さ) of caches, the source of
     the data should control the tradeoff.
	 トレードオフ　{データ取得コスト　アップデートスピード　キャッシュの正確さ}
	 データの元がトレードオフをコントロールすべき

   - The costs of implementing(実装) such a facility dictate(規定する、要求する) that it be
     generally useful, and not restricted to a single application.
     We should be able to use names to retrieve(回収する) host addresses,
     mailbox data, and other as yet undetermined information.  All
     data associated with a name is tagged with a type, and queries
     can be limited to a single type.
	ホストアドレス、メールデータなどなどを得るために名前を使うべき
	名前のデータにはtypeをタグ付けし、クエリは一つのtypeに絞るべき
	 
   - Because we want the name space to be useful in dissimilar
     networks and applications, we provide the ability(技能) to use the
     same name space with different protocol families or
     management.  For example, host address formats differ between
     protocols, though all protocols have the notion of address.
     The DNS tags all data with a class as well as the type, so
     that we can allow parallel use of different formats for data
     of type address.
	ホストアドレスのように、異なるネットワークやアプリケーションにでも有用な名前空間にしたい
	DNSは全てのデータに「tyep」と同様に「class」をつける
	 これによってtypeアドレスのデータに異なる形式が利用可能となる
	 
   - We want name server transactions to be independent of the
     communications system that carries them.  Some systems may
     wish to use datagrams for queries and responses, and only
     establish virtual circuits for transactions that need the
     reliability(信頼度) (e.g., database updates, long transactions); other
     systems will use virtual circuits exclusively(	もっぱら).
	ネームサーバーのトランザクションはそれを運ぶ通信システムから独立してほしい
	クエリとレスポンスにはデータグラムを使用していることが望ましい
	データベースアップデートや長いトランザクションなどの
	信頼性が必要なトランザクションのみにヴァーチャルサーキットが確立する
	 他のシステムはヴァーチャルサーキットをもっぱら使用するだろう
	 
   - The system should be useful across a wide spectrum(連続体、範囲) of host
     capabilities(能力、性能).  Both personal computers and large timeshared
     hosts should be able to use the system, though perhaps in
     different ways.
	 DNSはどんなマシンであろうと、たとえ方法が違ったとしても広く使われるようすべき
	 
2.3. Assumptions(仮定、前提) about usage

The organization(構成) of the domain system derives(引き出す) from some assumptions(仮定)
about the needs and usage patterns of its user community and (The organization of the domain system) is designed
to avoid many of the the complicated(複雑な) problems found in general purpose
database systems.

The assumptions are:

   - The size of the total database will initially be proportional
     to(に比例する) the number of hosts using the system, but will eventually(結局は)
     grow to be proportional to the number of users on those hosts
     as mailboxes and other information are added to the domain
     system.
	 databaseサイズは、最初は使うシステムのホスト数に比例するが
	結局、メール情報などをドメインシステムに足すのでユーザー数に比例するようになる
	 
   - Most of the data in the system will change very slowly (e.g.,
     mailbox bindings, host addresses), but that the system should
     be able to deal with subsets that change more rapidly (on the
     order of seconds or minutes).
	 システムのデータのほとんどがゆっくり変わっていくが、(hosts.txtを使っいる現状はってこと？)
	 もっと早く変更できるサブセットを扱えるようになるべきである

   - The administrative(管理の) boundaries [used to distribute(分配する)
     responsibility(責任) for the database] will usually(普段は) correspond to(に一致する)
     organizations that have one or more hosts.  Each organization
     [that has responsibility for a particular(特定の) set of domains] will
     provide redundant(冗長な) name servers, either(のどちらか) on the organization's
     own hosts or other hosts that the organization arranges to
     use.

   - Clients [of the domain system] should be able to identify
     trusted name servers they prefer to use before accepting
     referrals to name servers outside of this "trusted" set.
	クライアントは信頼できるネームサーバーを識別できるようにしておくべき
	クライアントは信頼できるネームサーバーを、信頼外のネームサーバーへの参照を受け入れる前に使われるのが好まれる
	
   - Access to information is more critical than instantaneous
     updates or guarantees of consistency.  Hence the update
     process allows updates to percolate out through the users of
     the domain system rather than guaranteeing that all copies are
     simultaneously updated.  When updates are unavailable due to
     network or host failure, the usual course is to believe old
     information while continuing efforts to update it.  The
     general model is that copies are distributed with timeouts for
     refreshing.  The distributor sets the timeout value and the
     recipient of the distribution is responsible for performing
     the refresh.  In special situations, very short intervals can
     be specified, or the owner can prohibit copies.

   - In any system that has a distributed database, a particular
     name server may be presented with a query that can only be
     answered by some other server.  The two general approaches to
     dealing with this problem are "recursive", in which the first
     server pursues the query for the client at another server, and
     "iterative", in which the server refers the client to another
     server and lets the client pursue the query.  Both approaches
     have advantages and disadvantages, but the iterative approach
     is preferred for the datagram style of access.  The domain
     system requires implementation of the iterative approach, but
     allows the recursive approach as an option.
	 
The domain system assumes that all data originates in master files
scattered through the hosts that use the domain system.  These master
files are updated by local system administrators.  Master files are text
files that are read by a local name server, and hence become available
through the name servers to users of the domain system.  The user
programs access name servers through standard programs called resolvers.

The standard format of master files allows them to be exchanged between
hosts (via FTP, mail, or some other mechanism); this facility is useful
when an organization wants a domain, but doesn't want to support a name
server.  The organization can maintain the master files locally using a
text editor, transfer them to a foreign host which runs a name server,
and then arrange with the system administrator of the name server to get
the files loaded.

Each host's name servers and resolvers are configured by a local system
administrator [RFC-1033].  For a name server, this configuration data
includes the identity of local master files and instructions on which
non-local master files are to be loaded from foreign servers.  The name
server uses the master files or copies to load its zones.  For
resolvers, the configuration data identifies the name servers which
should be the primary sources of information.

The domain system defines procedures for accessing the data and for
referrals to other name servers.  The domain system also defines
procedures for caching retrieved data and for periodic refreshing of
data defined by the system administrator.

The system administrators provide:

   - The definition of zone boundaries.

   - Master files of data.

   - Updates to master files.

   - Statements of the refresh policies desired.

The domain system provides:

   - Standard formats for resource data.

   - Standard methods for querying the database.

   - Standard methods for name servers to refresh local data from
     foreign name servers.

2.4. Elements of the DNS

The DNS has three major components:

   - The DOMAIN NAME SPACE and RESOURCE RECORDS, which are
     specifications for a tree structured name space and data
     associated with the names.  Conceptually, each node and leaf
     of the domain name space tree names a set of information, and
     query operations are attempts to extract specific types of
     information from a particular set.  A query names the domain
     name of interest and describes the type of resource
     information that is desired.  For example, the Internet
     uses some of its domain names to identify hosts; queries for
     address resources return Internet host addresses.

   - NAME SERVERS are server programs which hold information about
     the domain tree's structure and set information.  A name
     server may cache structure or set information about any part
     of the domain tree, but in general a particular name server
     has complete information about a subset of the domain space,
     and pointers to other name servers that can be used to lead to
     information from any part of the domain tree.  Name servers
     know the parts of the domain tree for which they have complete
     information; a name server is said to be an AUTHORITY for
     these parts of the name space.  Authoritative information is
     organized into units called ZONEs, and these zones can be
     automatically distributed to the name servers which provide
     redundant service for the data in a zone.

   - RESOLVERS are programs that extract information from name
     servers in response to client requests.  Resolvers must be
     able to access at least one name server and use that name
     server's information to answer a query directly, or pursue the
     query using referrals to other name servers.  A resolver will
     typically be a system routine that is directly accessible to
     user programs; hence no protocol is necessary between the
     resolver and the user program.

These three components roughly correspond to the three layers or views
of the domain system:

   - From the user's point of view, the domain system is accessed
     through a simple procedure or OS call to a local resolver.
     The domain space consists of a single tree and the user can
     request information from any section of the tree.

   - From the resolver's point of view, the domain system is
     composed of an unknown number of name servers.  Each name
     server has one or more pieces of the whole domain tree's data,
     but the resolver views each of these databases as essentially
     static.

   - From a name server's point of view, the domain system consists
     of separate sets of local information called zones.  The name
     server has local copies of some of the zones.  The name server
     must periodically refresh its zones from master copies in
     local files or foreign name servers.  The name server must
     concurrently process queries that arrive from resolvers.

In the interests of performance, implementations may couple these
functions.  For example, a resolver on the same machine as a name server
might share a database consisting of the the zones managed by the name
server and the cache managed by the resolver.
